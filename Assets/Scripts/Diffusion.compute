#pragma kernel Init
#pragma kernel Simulate
#pragma kernel Display

RWTexture2D<float4> Map;
RWTexture2D<float4> NewMap;
RWTexture2D<float4> DisplayMap;

Texture2D<float4> InitMap;

int width;
int height;

float feedRate;
float removeRate;
float diffuseRateA;
float diffuseRateB;
int diffuseRadius;

float4 colorA;
float4 colorB;

int displayMode;

[numthreads(8,8,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    Map[id.xy] = float4(1, InitMap[id.xy].r, 0, 0);
}

[numthreads(8,8,1)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
    float2 m = Map[id.xy].xy;
    float a = m.x;
    float b = m.y;

    float2 sum = 0;
    float weightSum;
    for (int offsetY = -diffuseRadius; offsetY <= diffuseRadius; offsetY ++)
    {
        for (int offsetX = -diffuseRadius; offsetX <= diffuseRadius; offsetX ++)
        {
            if (offsetX == 0 && offsetY == 0)
            {
                continue;
            }
            int2 samplePos = id.xy + int2(offsetX, offsetY);
            samplePos = min(int2(width - 1, height - 1), max(0, samplePos));
            float sqrDst = offsetX * offsetX + offsetY * offsetY;

            if (sqrDst <= diffuseRadius * diffuseRadius)
            {
                float weight = 1.0 / sqrt(sqrDst);
                sum += Map[samplePos].xy * weight;
                weightSum += weight;
            }
        }
    }

    float2 diffuseStrength = sum / weightSum - m;

    float deltaA = diffuseRateA * diffuseStrength.x - a * b * b + feedRate * (1-a);
    float newA = a + deltaA;

    float deltaB = diffuseRateB * diffuseStrength.y + a * b * b - (removeRate + feedRate) * b;
    float newB = b + deltaB;

    NewMap[id.xy] = float4(max(0, newA), min(newB, 1), deltaA, deltaB);
}

[numthreads(8,8,1)]
void Display(uint3 id : SV_DispatchThreadID)
{
    float4 m = Map[id.xy];
    float4 col = float4(0, 0, 0, 1);
    float a = m.x;
    float b = m.y;
    float deltaA = m.z;
    float deltaB = m.w;

    const float deltaAThreshold = 0.0005;
    deltaA = max(0, deltaA - deltaAThreshold);

    if (displayMode == 0)
    {
        col = float4(m.xy, 0, 1);
    }
    else if (displayMode == 1)
    {
        col = a - b;
    }
    else if (displayMode == 2)
    {
        float4 c = float4(b, deltaA * 350, deltaB * 250, 0);
        c.g = pow(c.g, 2) * 6;
        col = c;
    }
    else if (displayMode == 3)
    {
        float v = a - b;
        col = 1 - pow(abs(1 - (v + 1 - max(deltaB, deltaA) * 350)), 0.6) + float4(deltaB, 0, 0, 0) * 400;
    }
    else if (displayMode == 4)
    {
        col = colorA * a + colorB * b;
    }
    
    DisplayMap[id.xy] = float4(col.rgb, 1);
}